<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Task Manager - C++ Project</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        h1, h2 {
            color: #2c3e50;
        }
        pre {
            background-color: #272822;
            color: #f8f8f2;
            padding: 15px;
            overflow-x: auto;
            border-radius: 5px;
        }
        code {
            font-family: "Courier New", Courier, monospace;
        }
        .section {
            background: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0px 2px 5px rgba(0,0,0,0.1);
        }
        a {
            color: #2980b9;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>

    <div class="section">
        <h1>Simple Task Manager</h1>
        <p>A console-based <strong>C++</strong> program for managing tasks. You can add tasks, mark them as completed, and view all tasks. Tasks are saved in a file for persistence.</p>
    </div>

    <div class="section">
        <h2>Features</h2>
        <ul>
            <li>Persistent storage in <code>tasks.txt</code></li>
            <li>Mark tasks as <strong>Completed</strong> or <strong>Pending</strong></li>
            <li>Input validation for empty tasks and invalid numbers</li>
            <li>Simple text-based console interface</li>
        </ul>
    </div>

    <div class="section">
        <h2>Usage</h2>
        <ol>
            <li>Compile the program:
                <pre><code>g++ -o TaskManager TaskManager.cpp</code></pre>
            </li>
            <li>Run the program:
                <pre><code>./TaskManager   # Linux/macOS
TaskManager.exe # Windows</code></pre>
            </li>
            <li>Follow the on-screen options to add, complete, or view tasks.</li>
        </ol>
    </div>

    <div class="section">
        <h2>Example</h2>
        <pre><code>Options:
1. Add Task
2. Complete Task
3. Show All Tasks
4. Exit
Choose an option (1-4)= 1
Enter task that you shall do: Finish homework
Task added successfully</code></pre>
    </div>

    <div class="section">
        <h2>Source Code</h2>
        <pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
using namespace std;

// Task class
class Task {
private:
    string description;
    bool done;
public:
    Task(const string& des) : description(des), done(false) {}
    string getDes(){ return description; }
    bool isDone(){ return done; }
    void StatusDone(){ done = true; }
};

// Task manager class
class TaskM {
private:
    vector&lt;Task&gt; tasks;
    string filename = "tasks.txt";
    void savefile() {
        ofstream outFile(filename);
        if(!outFile){ cout &lt;&lt; "Couldn't Save Task Files" &lt;&lt; endl; return; }
        for(auto& task : tasks){
            outFile &lt;&lt; task.getDes() &lt;&lt; "|" &lt;&lt; (task.isDone() ? "1" : "0") &lt;&lt; endl;
        }
    }
    void loadfile() {
        ifstream inFile(filename);
        if(!inFile) return;
        tasks.clear();
        string line;
        while(getline(inFile, line)){
            size_t delimPos = line.find('|');
            if(delimPos == string::npos) continue;
            string desc = line.substr(0, delimPos);
            string statusStr = line.substr(delimPos + 1);
            statusStr.erase(statusStr.find_last_not_of(" \n\r\t")+1);
            bool completed = (statusStr=="1");
            tasks.emplace_back(desc);
            if(completed) tasks.back().StatusDone();
        }
    }
public:
    TaskM(){ loadfile(); }
    void addTask(const string& des){ 
        if(des.empty()){ cout &lt;&lt; "Error: Task description cannot be empty." &lt;&lt; endl; return; }
        tasks.emplace_back(des);
        savefile();
        cout &lt;&lt; "Task added successfully" &lt;&lt; endl;
    }
    void completeTask(size_t index){
        if(index &gt;= tasks.size()){ cout &lt;&lt; "Error: Invalid task number" &lt;&lt; endl; return; }
        if(tasks[index].isDone()){ cout &lt;&lt; "Task already completed!" &lt;&lt; endl; return; }
        tasks[index].StatusDone();
        savefile();
        cout &lt;&lt; "Task marked as completed." &lt;&lt; endl;
    }
    void displayTasks(){
        if(tasks.empty()){ cout &lt;&lt; "No tasks available" &lt;&lt; endl; return; }
        for(size_t i=0; i&lt;tasks.size(); ++i){
            cout &lt;&lt; i+1 &lt;&lt; ". " &lt;&lt; tasks[i].getDes() &lt;&lt; " (" 
                 &lt;&lt; (tasks[i].isDone() ? "Completed" : "Pending") &lt;&lt; ")" &lt;&lt; endl;
        }
    }
};

// Main
int main(){
    TaskM manager;
    string input;
    while(true){
        cout &lt;&lt; "\nOptions:\n1. Add Task\n2. Complete Task\n3. Show All Tasks\n4. Exit\nChoose an option (1-4)= ";
        getline(cin, input);
        if(input=="1"){ cout &lt;&lt; "Enter task: "; getline(cin,input); manager.addTask(input); }
        else if(input=="2"){ manager.displayTasks(); cout &lt;&lt; "Enter task number to complete: "; getline(cin,input); try{ size_t index=stoul(input)-1; manager.completeTask(index);} catch(...){ cout &lt;&lt; "Invalid number\n";} }
        else if(input=="3"){ manager.displayTasks(); }
        else if(input=="4"){ cout &lt;&lt; "Goodbye!" &lt;&lt; endl; break; }
        else{ cout &lt;&lt; "Invalid option!" &lt;&lt; endl; }
    }
    return 0;
}</code></pre>
    </div>

    <div class="section">
        <h2>License</h2>
        <p>This project is licensed under the <strong>MIT License</strong>. See the <code>LICENSE</code> file for details.</p>
    </div>

</body>
</html>
